name: Publish and commit bottles
on:
  workflow_dispatch:
    inputs:
      pull_request:
        description: Pull request number
        required: true
      large_runner:
        description: "Run the upload job on a large runner? (default: false)"
        type: boolean
        required: false
        default: false
      autosquash:
        description: "Squash pull request commits according to Homebrew style? (default: false)"
        type: boolean
        required: false
        default: false
      warn_on_upload_failure:
        description: "Pass `--warn-on-upload-failure` to `brew pr-pull`? (default: false)"
        type: boolean
        required: false
        default: false
      message:
        description: "Message to include when autosquashing revision bumps, deletions, and rebuilds (requires autosquash)"
        required: false
env:
  HOMEBREW_DEVELOPER: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_FROM_API: 1  
  GH_REPO: ${{github.repository}}
  GH_DEBUG: 1
  GH_NO_UPDATE_NOTIFIER: 1
  GH_PROMPT_DISABLED: 1
jobs:
  upload:
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/homebrew/ubuntu22.04:master
    steps:
      - name: Post comment once started
        uses: Homebrew/actions/post-comment@master
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          issue: ${{github.event.inputs.pull_request}}
          body: ':beers: @BrewTestBot has [triggered a merge](${{github.event.repository.html_url}}/actions/runs/${{github.run_id}}).'
          bot_body: ':robot: A scheduled task has [triggered a merge](${{github.event.repository.html_url}}/actions/runs/${{github.run_id}}).'
          bot: BrewTestBot

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
        with:
          test-bot: false

      - name: Cache gems
        uses: actions/cache@v3
        with:
          path: ${{steps.set-up-homebrew.outputs.gems-path}}
          key: ${{runner.os}}-rubygems-v2-${{steps.set-up-homebrew.outputs.gems-hash}}
          restore-keys: ${{runner.os}}-rubygems-v2-

      - name: Install gems
        run: brew install-bundler-gems

      - name: Install gh, skopeo, and unzip
        working-directory: ${{steps.set-up-homebrew.outputs.repository-path}}
        run: bash .github/scripts/release-tools.sh

      - name: Setup git
        run: |
          git config --global user.email 1589480+BrewTestBot@users.noreply.github.com
          git config --global user.name BrewTestBot

      - name: Checkout PR branch
        run: gh pr checkout '${{github.event.inputs.pull_request}}'
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        working-directory: ${{steps.set-up-homebrew.outputs.repository-path}}

      - name: Pull bottles
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{secrets.GITHUB_TOKEN}}
          HOMEBREW_GITHUB_PACKAGES_USER: ${{ github.repository_owner }}
          HOMEBREW_GITHUB_PACKAGES_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          sudo sed -i 's/Closes ##{pr}/[skip ci]/g' "$(brew --repository)"/Library/Homebrew/dev-cmd/pr-pull.rb
          # Don't quote arguments that might be empty; this causes errors.
          brew pr-pull \
            --debug \
            --no-cherry-pick \
            --workflows=build.yml \
            --tap=${{ github.repository_owner }}/php \
            --root-url="https://ghcr.io/v2/${{ github.repository_owner }}/php" \
            '${{inputs.autosquash && '--autosquash' || '--clean'}}' \
            ${{inputs.warn_on_upload_failure && '--warn-on-upload-failure' || ''}} \
            ${{inputs.message && format('--message="{0}"', inputs.message) || ''}} \
            '${{github.event.inputs.pull_request}}'

      - name: Get current branch and remote
        id: push-configuration
        working-directory: ${{steps.set-up-homebrew.outputs.repository-path}}
        run: |
          branch="$(git branch --show-current)"
          if [ -n "$branch" ]
          then
            echo "branch=$branch" >> "$GITHUB_OUTPUT"
          else
            echo "::error ::Not on a branch!"
            exit 1
          fi
          if push_remote="$(git config --local "branch.$branch.pushRemote")"
          then
            echo "remote=$push_remote" >> "$GITHUB_OUTPUT"
          elif remote="$(git config --local "branch.$branch.remote")"
          then
            echo "remote=$remote" >> "$GITHUB_OUTPUT"
          else
            echo "::error ::Could not find branch remote!"
            exit 1
          fi

      - name: Push commits
        uses: Homebrew/actions/git-try-push@master
        with:
          directory: ${{steps.set-up-homebrew.outputs.repository-path}}
          token: ${{secrets.GITHUB_TOKEN}}

      - name: Post comment on failure
        if: ${{!success()}}
        uses: Homebrew/actions/post-comment@master
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          issue: ${{github.event.inputs.pull_request}}
          body: ":warning: @${{github.actor}} bottle publish [failed](${{github.event.repository.html_url}}/actions/runs/${{github.run_id}})."
          bot_body: ":warning: Bottle publish [failed](${{github.event.repository.html_url}}/actions/runs/${{github.run_id}})."
          bot: BrewTestBot

      - name: Dismiss approvals on failure
        if: ${{!success()}}
        uses: Homebrew/actions/dismiss-approvals@master
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          pr: ${{github.event.inputs.pull_request}}
          message: "bottle publish failed"

      - name: Add CI-published-bottle-commits label
        run: gh pr edit --add-label CI-published-bottle-commits '${{github.event.inputs.pull_request}}'
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        working-directory: ${{steps.set-up-homebrew.outputs.repository-path}}

      - name: Wait until pull request branch is in sync with local repository
        working-directory: ${{steps.set-up-homebrew.outputs.repository-path}}
        run: |
          local_head="$(git rev-parse HEAD)"
          echo "::notice ::Local repository HEAD: $local_head"
          attempt=0
          max_attempts=10
          timeout=1
          # Wait (with exponential backoff) until the PR branch is in sync
          while [ "$attempt" -lt "$max_attempts" ]
          do
            remote_head="$(git ls-remote origin "pull/${{inputs.pull_request}}/head" | cut -f1)"
            echo "::notice ::Pull request HEAD: $remote_head"
            if [ "$local_head" = "$remote_head" ]
            then
              success=1
              break
            fi
            echo "::notice ::Remote repository not in sync. Checking again in ${timeout}s..."
            sleep "$timeout"
            attempt=$(( attempt + 1 ))
            timeout=$(( timeout * 2 ))
          done
          # One last check...
          if [ -z "$success" ] && [ "$local_head" != "$(git ls-remote origin "pull/${{inputs.pull_request}}/head" | cut -f1)" ]
          then
            echo "::error ::No attempts remaining. Giving up."
            exit 1
          fi
      - name: Enable PR automerge
        id: automerge
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        working-directory: ${{steps.set-up-homebrew.outputs.repository-path}}
        run: gh pr merge --auto --merge '${{inputs.pull_request}}'

      - name: Post comment on failure
        if: ${{failure() && steps.automerge.conclusion == 'failure'}}
        uses: Homebrew/actions/post-comment@master
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          issue: ${{github.event.inputs.pull_request}}
          body: ":warning: @${{github.actor}} [Failed to enable automerge](${{github.event.repository.html_url}}/actions/runs/${{github.run_id}})."
          bot_body: ":warning: [Failed to enable automerge](${{github.event.repository.html_url}}/actions/runs/${{github.run_id}})."
          bot: BrewTestBot
